/*!
 * /**
 *  * Copyright (c) Meta Platforms, Inc. and affiliates.
 *  *
 *  * This source code is licensed under the MIT license found in the
 *  * LICENSE file in the root directory of this source tree.
 *  * /
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/errors.ts":
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.NotFoundPackageJsonError = exports.MalformedPackageJsonError = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

class NotFoundPackageJsonError extends Error {
  constructor(rootDir) {
    super(`Could not find a "package.json" file in ${rootDir}`);
    this.name = '';
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    Error.captureStackTrace(this, () => {});
  }
}
exports.NotFoundPackageJsonError = NotFoundPackageJsonError;
class MalformedPackageJsonError extends Error {
  constructor(packageJsonPath) {
    super(`There is malformed json in ${packageJsonPath}`);
    this.name = '';
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    Error.captureStackTrace(this, () => {});
  }
}
exports.MalformedPackageJsonError = MalformedPackageJsonError;

/***/ }),

/***/ "./src/generateConfigFile.ts":
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
function _jestConfig() {
  const data = require("jest-config");
  _jestConfig = function () {
    return data;
  };
  return data;
}
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const stringifyOption = (option, map, linePrefix = '') => {
  const description = _jestConfig().descriptions[option];
  const optionDescription = description != null && description.length > 0 ? `  // ${description}` : '';
  const stringifiedObject = `${option}: ${JSON.stringify(map[option], null, 2)}`;
  return `${optionDescription}\n${stringifiedObject.split('\n').map(line => `  ${linePrefix}${line}`).join('\n')},`;
};
const generateConfigFile = (results, generateEsm = false) => {
  const {
    useTypescript,
    coverage,
    coverageProvider,
    clearMocks,
    environment
  } = results;
  const overrides = {};
  if (coverage) {
    Object.assign(overrides, {
      collectCoverage: true,
      coverageDirectory: 'coverage'
    });
  }
  if (coverageProvider === 'v8') {
    Object.assign(overrides, {
      coverageProvider: 'v8'
    });
  }
  if (environment === 'jsdom') {
    Object.assign(overrides, {
      testEnvironment: 'jsdom'
    });
  }
  if (clearMocks) {
    Object.assign(overrides, {
      clearMocks: true
    });
  }
  const overrideKeys = Object.keys(overrides);
  const properties = [];
  for (const option in _jestConfig().descriptions) {
    const opt = option;
    if (overrideKeys.includes(opt)) {
      properties.push(stringifyOption(opt, overrides));
    } else {
      properties.push(stringifyOption(opt, _jestConfig().defaults, '// '));
    }
  }
  const configHeaderMessage = `/**
 * For a detailed explanation regarding each configuration property, visit:
 * https://jestjs.io/docs/configuration
 */
`;
  const jsDeclaration = `/** @type {import('jest').Config} */
const config = {`;
  const tsDeclaration = `import type {Config} from 'jest';

const config: Config = {`;
  const cjsExport = 'module.exports = config;';
  const esmExport = 'export default config;';
  return [configHeaderMessage, useTypescript ? tsDeclaration : jsDeclaration, properties.join('\n\n'), '};\n', useTypescript || generateEsm ? esmExport : cjsExport, ''].join('\n');
};
var _default = exports["default"] = generateConfigFile;

/***/ }),

/***/ "./src/modifyPackageJson.ts":
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const modifyPackageJson = ({
  projectPackageJson,
  shouldModifyScripts
}) => {
  if (shouldModifyScripts) {
    if (projectPackageJson.scripts) {
      projectPackageJson.scripts.test = 'jest';
    } else {
      projectPackageJson.scripts = {
        test: 'jest'
      };
    }
  }
  delete projectPackageJson.jest;
  return `${JSON.stringify(projectPackageJson, null, 2)}\n`;
};
var _default = exports["default"] = modifyPackageJson;

/***/ }),

/***/ "./src/questions.ts":
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.testScriptQuestion = exports["default"] = void 0;
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const defaultQuestions = [{
  initial: false,
  message: 'Would you like to use Typescript for the configuration file?',
  name: 'useTypescript',
  type: 'confirm'
}, {
  choices: [{
    title: 'node',
    value: 'node'
  }, {
    title: 'jsdom (browser-like)',
    value: 'jsdom'
  }],
  initial: 0,
  message: 'Choose the test environment that will be used for testing',
  name: 'environment',
  type: 'select'
}, {
  initial: false,
  message: 'Do you want Jest to add coverage reports?',
  name: 'coverage',
  type: 'confirm'
}, {
  choices: [{
    title: 'v8',
    value: 'v8'
  }, {
    title: 'babel',
    value: 'babel'
  }],
  initial: 0,
  message: 'Which provider should be used to instrument code for coverage?',
  name: 'coverageProvider',
  type: 'select'
}, {
  initial: false,
  message: 'Automatically clear mock calls, instances, contexts and results before every test?',
  name: 'clearMocks',
  type: 'confirm'
}];
var _default = exports["default"] = defaultQuestions;
const testScriptQuestion = exports.testScriptQuestion = {
  initial: true,
  message: 'Would you like to use Jest when running "test" script in "package.json"?',
  name: 'scripts',
  type: 'confirm'
};

/***/ }),

/***/ "./src/runCreate.ts":
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports.runCLI = runCLI;
exports.runCreate = runCreate;
function path() {
  const data = _interopRequireWildcard(require("path"));
  path = function () {
    return data;
  };
  return data;
}
function _chalk() {
  const data = _interopRequireDefault(require("chalk"));
  _chalk = function () {
    return data;
  };
  return data;
}
function _exitX() {
  const data = _interopRequireDefault(require("exit-x"));
  _exitX = function () {
    return data;
  };
  return data;
}
function fs() {
  const data = _interopRequireWildcard(require("graceful-fs"));
  fs = function () {
    return data;
  };
  return data;
}
function _prompts() {
  const data = _interopRequireDefault(require("prompts"));
  _prompts = function () {
    return data;
  };
  return data;
}
function _jestConfig() {
  const data = require("jest-config");
  _jestConfig = function () {
    return data;
  };
  return data;
}
function _jestUtil() {
  const data = require("jest-util");
  _jestUtil = function () {
    return data;
  };
  return data;
}
var _errors = __webpack_require__("./src/errors.ts");
var _generateConfigFile = _interopRequireDefault(__webpack_require__("./src/generateConfigFile.ts"));
var _modifyPackageJson = _interopRequireDefault(__webpack_require__("./src/modifyPackageJson.ts"));
var _questions = _interopRequireWildcard(__webpack_require__("./src/questions.ts"));
function _interopRequireDefault(e) { return e && e.__esModule ? e : { default: e }; }
function _interopRequireWildcard(e, t) { if ("function" == typeof WeakMap) var r = new WeakMap(), n = new WeakMap(); return (_interopRequireWildcard = function (e, t) { if (!t && e && e.__esModule) return e; var o, i, f = { __proto__: null, default: e }; if (null === e || "object" != typeof e && "function" != typeof e) return f; if (o = t ? n : r) { if (o.has(e)) return o.get(e); o.set(e, f); } for (const t in e) "default" !== t && {}.hasOwnProperty.call(e, t) && ((i = (o = Object.defineProperty) && Object.getOwnPropertyDescriptor(e, t)) && (i.get || i.set) ? o(f, t, i) : f[t] = e[t]); return f; })(e, t); }
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

const {
  JEST_CONFIG_BASE_NAME,
  JEST_CONFIG_EXT_MJS,
  JEST_CONFIG_EXT_JS,
  JEST_CONFIG_EXT_TS,
  JEST_CONFIG_EXT_ORDER,
  PACKAGE_JSON
} = _jestConfig().constants;
const getConfigFilename = ext => JEST_CONFIG_BASE_NAME + ext;
async function runCLI() {
  try {
    const rootDir = process.argv[2];
    await runCreate(rootDir);
  } catch (error) {
    (0, _jestUtil().clearLine)(process.stderr);
    (0, _jestUtil().clearLine)(process.stdout);
    if (error instanceof Error && Boolean(error?.stack)) {
      console.error(_chalk().default.red(error.stack));
    } else {
      console.error(_chalk().default.red(error));
    }
    (0, _exitX().default)(1);
    throw error;
  }
}
async function runCreate(rootDir = process.cwd()) {
  rootDir = (0, _jestUtil().tryRealpath)(rootDir);
  // prerequisite checks
  const projectPackageJsonPath = path().join(rootDir, PACKAGE_JSON);
  if (!fs().existsSync(projectPackageJsonPath)) {
    throw new _errors.NotFoundPackageJsonError(rootDir);
  }
  const questions = [..._questions.default];
  let hasJestProperty = false;
  let projectPackageJson;
  try {
    projectPackageJson = JSON.parse(fs().readFileSync(projectPackageJsonPath, 'utf8'));
  } catch {
    throw new _errors.MalformedPackageJsonError(projectPackageJsonPath);
  }
  if (projectPackageJson.jest) {
    hasJestProperty = true;
  }
  const existingJestConfigExt = JEST_CONFIG_EXT_ORDER.find(ext => fs().existsSync(path().join(rootDir, getConfigFilename(ext))));
  if (hasJestProperty || existingJestConfigExt != null) {
    const result = await (0, _prompts().default)({
      initial: true,
      message: 'It seems that you already have a jest configuration, do you want to override it?',
      name: 'continue',
      type: 'confirm'
    });
    if (!result.continue) {
      console.log();
      console.log('Aborting...');
      return;
    }
  }

  // Add test script installation only if needed
  if (!projectPackageJson.scripts || projectPackageJson.scripts.test !== 'jest') {
    questions.unshift(_questions.testScriptQuestion);
  }

  // Start the init process
  console.log();
  console.log(_chalk().default.underline('The following questions will help Jest to create a suitable configuration for your project\n'));
  let promptAborted = false;
  const results = await (0, _prompts().default)(questions, {
    onCancel: () => {
      promptAborted = true;
    }
  });
  if (promptAborted) {
    console.log();
    console.log('Aborting...');
    return;
  }

  // Determine if Jest should use JS or TS for the config file
  const jestConfigFileExt = results.useTypescript ? JEST_CONFIG_EXT_TS : projectPackageJson.type === 'module' ? JEST_CONFIG_EXT_MJS : JEST_CONFIG_EXT_JS;

  // Determine Jest config path
  const jestConfigPath = existingJestConfigExt == null ? path().join(rootDir, getConfigFilename(jestConfigFileExt)) : getConfigFilename(existingJestConfigExt);
  const shouldModifyScripts = results.scripts;
  if (shouldModifyScripts || hasJestProperty) {
    const modifiedPackageJson = (0, _modifyPackageJson.default)({
      projectPackageJson,
      shouldModifyScripts
    });
    fs().writeFileSync(projectPackageJsonPath, modifiedPackageJson);
    console.log('');
    console.log(`✏️  Modified ${_chalk().default.cyan(projectPackageJsonPath)}`);
  }
  const generatedConfig = (0, _generateConfigFile.default)(results, projectPackageJson.type === 'module' || jestConfigPath.endsWith(JEST_CONFIG_EXT_MJS));
  fs().writeFileSync(jestConfigPath, generatedConfig);
  console.log('');
  console.log(`📝  Configuration file created at ${_chalk().default.cyan(jestConfigPath)}`);
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it uses a non-standard name for the exports (exports).
(() => {
var exports = __webpack_exports__;


Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "runCLI", ({
  enumerable: true,
  get: function () {
    return _runCreate.runCLI;
  }
}));
Object.defineProperty(exports, "runCreate", ({
  enumerable: true,
  get: function () {
    return _runCreate.runCreate;
  }
}));
var _runCreate = __webpack_require__("./src/runCreate.ts");
})();

module.exports = __webpack_exports__;
/******/ })()
;